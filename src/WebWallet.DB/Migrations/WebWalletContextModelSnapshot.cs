// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebWallet.DB;

namespace WebWallet.DB.Migrations
{
    [DbContext(typeof(WebWalletContext))]
    partial class WebWalletContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebWallet.DB.Entities.CurrencyBalance", b =>
                {
                    b.Property<string>("Currency")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("WalletId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.HasKey("Currency", "WalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("WebWallet.DB.Entities.MoneyTransfer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<double?>("ActualCurrencyRate")
                        .HasColumnType("double");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("FromCurrencyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("ToCurrencyId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UserWalletId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserWalletId");

                    b.HasIndex("FromCurrencyId", "UserWalletId");

                    b.HasIndex("ToCurrencyId", "UserWalletId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("WebWallet.DB.Entities.UserWallet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("WebWallet.DB.Entities.CurrencyBalance", b =>
                {
                    b.HasOne("WebWallet.DB.Entities.UserWallet", "Wallet")
                        .WithMany("Balances")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebWallet.DB.Entities.MoneyTransfer", b =>
                {
                    b.HasOne("WebWallet.DB.Entities.UserWallet", "Wallet")
                        .WithMany("Transfer")
                        .HasForeignKey("UserWalletId");

                    b.HasOne("WebWallet.DB.Entities.CurrencyBalance", "FromCurrency")
                        .WithMany("FromTransfers")
                        .HasForeignKey("FromCurrencyId", "UserWalletId");

                    b.HasOne("WebWallet.DB.Entities.CurrencyBalance", "ToCurrency")
                        .WithMany("ToTransfers")
                        .HasForeignKey("ToCurrencyId", "UserWalletId");
                });
#pragma warning restore 612, 618
        }
    }
}
